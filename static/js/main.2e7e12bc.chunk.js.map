{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","useState","latest","setLatest","results","setResults","searchCountries","setSearchCountries","useEffect","axios","all","get","then","responseArr","data","catch","err","console","log","lastUpdated","Date","parseInt","updated","toString","countries","filter","item","country","includes","map","i","Card","key","bg","text","className","style","margin","Img","variant","src","countryInfo","flag","Body","Title","cases","deaths","recovered","todayCases","todayDeaths","active","critical","textAlign","CardDeck","Text","Footer","Form","Group","controlId","Control","type","placeholder","onChange","e","target","value","queries","columns","query","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.2e7e12bc.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport Card from 'react-bootstrap/Card';\nimport CardDeck from \"react-bootstrap/CardDeck\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport axios from \"axios\";\nimport Columns from \"react-columns\";\nimport Form from \"react-bootstrap/Form\";\n\n\nfunction App() {\n  const [latest, setLatest] = useState([]);\n  const [results, setResults] = useState([]);\n  const [searchCountries, setSearchCountries] = useState(\"\");\n\n  useEffect(() => {\n    axios\n      .all([\n        axios.get(\"https://corona.lmao.ninja/v2/all\"),\n        axios.get(\"https://corona.lmao.ninja/v2/countries\")\n      ])\n      .then(responseArr => {\n        setLatest(responseArr[0].data);\n        setResults(responseArr[1].data);\n      })\n      .catch(err => {\n        console.log(err);\n      });\n  }, []);\n\n  const date = new Date(parseInt(latest.updated));\n  const lastUpdated = date.toString();\n\n  const filterCountries = results.filter(item => {\n    return searchCountries !== \"\" ? item.country.includes(searchCountries) : item;\n  });\n\n  const countries = filterCountries.map((data, i) => {\n    return (\n      <Card\n      key={i}\n      bg=\"dark\"\n      text=\"white\"\n      className=\"text-center\"\n      style={{ margin: \"10px\" }} \n      >\n       <Card.Img variant=\"top\" src={data.countryInfo.flag} />\n       <Card.Body>\n          <Card.Title>{data.country}</Card.Title> \n          <Card.Title>Cases: {data.cases}</Card.Title>\n          <Card.Title>Deaths: {data.deaths}</Card.Title>\n          <Card.Title>Recovered: {data.recovered}</Card.Title>\n          <Card.Title>Today's Cases: {data.todayCases}</Card.Title>\n          <Card.Title>Today's Deaths: {data.todayDeaths}</Card.Title>\n          <Card.Title>Active: {data.active}</Card.Title>\n          <Card.Title>Critical: {data.critical}</Card.Title>\n        </Card.Body> \n      </Card>\n    );\n  });\n\n  var queries = [{\n    columns: 2,\n    query: 'min-width: 500px'\n  }, {\n    columns: 3,\n    query: 'min-width: 1000px'\n  }];\n\n  return (\n    <div>\n      <h2 style={{ textAlign: \"center\" }}>Live Stat Tracker</h2>\n      <CardDeck>\n        <Card bg=\"dark\" text=\"white\" className=\"text-center\" style={{ margin: \"10px\"}}>\n          <Card.Body>\n            <Card.Title>Cases</Card.Title>\n            <Card.Text>\n              {latest.cases}\n            </Card.Text>\n          </Card.Body>\n          <Card.Footer>\n            <small>Last Updated: {lastUpdated}</small>\n          </Card.Footer>\n        </Card>\n       \n        <Card bg=\"danger\" text={\"white\"} className=\"text-center\" style={{ margin: \"10px\"}}>\n          <Card.Body>\n            <Card.Title>Deaths</Card.Title>\n            <Card.Text>\n              {latest.deaths}\n            </Card.Text>\n          </Card.Body>\n          <Card.Footer>\n            <small>Last Updated: {lastUpdated}</small>\n          </Card.Footer>\n        </Card>\n        \n        <Card bg=\"success\" text={\"white\"} className=\"text-center\" style={{ margin: \"10px\"}}>\n          <Card.Body>\n            <Card.Title>Recovered</Card.Title>\n            <Card.Text>\n              {latest.recovered}\n            </Card.Text>\n          </Card.Body>\n          <Card.Footer>\n            <small>Last Updated: {lastUpdated}</small>\n          </Card.Footer>\n        </Card>\n      </CardDeck>\n\n      <Form>\n        <Form.Group controlId=\"formGroupSearch\">\n          <Form.Control type=\"text\" placeholder=\"Search for a country (eg. UK, USA, Australia)\" onChange={e => setSearchCountries(e.target.value)} />\n        </Form.Group>\n      </Form>\n\n      <Columns queries={queries}>{countries}</Columns>\n    </div>\n  );\n}\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}